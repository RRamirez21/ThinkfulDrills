{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Unit1_Dictionary_Modes.ipynb",
      "version": "0.3.2",
      "views": {},
      "default_view": {},
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "metadata": {
        "id": "SGtHSPY9gwGT",
        "colab_type": "code",
        "colab": {
          "autoexec": {
            "startup": false,
            "wait_interval": 0
          }
        }
      },
      "cell_type": "code",
      "source": [
        "'''You probably know that the \"mode\" of a set of data is the data point that appears most frequently. Looking at the characters that make up the string \"sarsaparilla\" we can see that the letter \"a\" appears four times, more than any other letter, so the mode of \"sarsaparilla\" is \"a\".\n",
        "\n",
        "But do you know what happens when two or more data points occur the most? For example, what is the mode of the letters in \"tomato\"? Both \"t\" and \"o\" seem to be tied for appearing most frequently.\n",
        "\n",
        "Turns out that a set of data can, in fact, have multiple modes, so \"tomato\" has two modes: \"t\" and \"o\". It's important to note, though, that if all data appears the same number of times there is no mode. So \"cat\", \"redder\", and [1, 2, 3, 4, 5] do not have a mode.\n",
        "\n",
        "Your job is to write a function modes() that will accept one argument data that is a sequence like a string or a list of numbers and return a sorted list containing the mode(s) of the input sequence. If data does not contain a mode you should return an empty list.\n",
        "\n",
        "For example:\n",
        "\n",
        ">>> modes(\"tomato\")\n",
        "[\"o\", \"t\"]\n",
        ">>> modes([1, 3, 3, 7])\n",
        "[3]\n",
        ">>> modes([\"redder\"])\n",
        "[]\n",
        "You can trust that your input data will always be a sequence and will always contain orderable types (no inputs like [1, 2, 2, \"a\", \"b\", \"b\"]).'''\n",
        "\n",
        "def modes(data):\n",
        "    counts = {}\n",
        "    \n",
        "    for value in data:\n",
        "        if value in counts:\n",
        "            counts[value] += 1\n",
        "        else:\n",
        "            counts[value] = 1\n",
        "            \n",
        "    max_occurrence = max(counts.values())\n",
        "\n",
        "\n",
        "    min_occurrence = min(counts.values())\n",
        "    if max_occurrence == min_occurrence:\n",
        "        return []\n",
        "\n",
        "    result = []\n",
        "    for key in counts.keys():\n",
        "        if counts[key] == max_occurrence:\n",
        "            result.append(key)\n",
        "\n",
        "    return sorted(result)\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "UOj6mQUfJvSO",
        "colab_type": "code",
        "colab": {
          "autoexec": {
            "startup": false,
            "wait_interval": 0
          },
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "b9bd5da9-edbc-4f50-8e8d-18ea43bb5b67",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1533087794358,
          "user_tz": 240,
          "elapsed": 571,
          "user": {
            "displayName": "Antonio Rueda Toicen",
            "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s128",
            "userId": "101459211250025877627"
          }
        }
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'a', 'm', 'o', 't'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "metadata": {
        "id": "dsTBFXYfIfEa",
        "colab_type": "code",
        "colab": {
          "autoexec": {
            "startup": false,
            "wait_interval": 0
          },
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "cff685a0-12f0-40fb-c698-ea547f6ca83e",
        "executionInfo": {
          "status": "ok",
          "timestamp": 1533088683570,
          "user_tz": 240,
          "elapsed": 441,
          "user": {
            "displayName": "Antonio Rueda Toicen",
            "photoUrl": "https://lh3.googleusercontent.com/a/default-user=s128",
            "userId": "101459211250025877627"
          }
        }
      },
      "cell_type": "code",
      "source": [
        "def modes(data):\n",
        "  \n",
        "  characterSet = set(data)\n",
        "  characterList = list(data)\n",
        "  characterCount = {}\n",
        "  keys = set(data)\n",
        "  for k in keys:\n",
        "    #print(characterList.count(k))\n",
        "    characterCount[k] = characterList.count(k)\n",
        " \n",
        "  #print(characterCount) \n",
        "  \n",
        "  mode = max(characterCount.values())\n",
        "  \n",
        "  valuesToReturn = []\n",
        "  for k in characterCount.keys():\n",
        "    if characterCount[k] == mode:\n",
        "      valuesToReturn.append(k)\n",
        "       \n",
        "  # if there is no mode, we return an empty list   \n",
        "  if (len(characterSet) - list(characterCount.values()).count(mode) == 0 ):\n",
        "    return []\n",
        "  \n",
        "  return sorted(valuesToReturn)\n",
        "\n",
        "\n",
        "modes(\"redder\")\n",
        "#modes(\"tomato\")"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    }
  ]
}
